name: create release
'on': push
jobs:
  release-project:
    name: Release different versions of Text file
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v2
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: 'python -m pip install --upgrade pip

        pip install zipfile36 openpecha PyYAML

        '
    - name: Create zip file for text and hfml
      run: "import os \nimport re\nimport yaml\nfrom zipfile36 import ZipFile\nfrom\
        \ os.path import basename\nfrom pathlib import Path\nfrom openpecha.serializers\
        \ import HFMLSerializer\n\n\ndef get_meta_info(meta_data):\n    uuid = meta_data['id'][:6]\n\
        \    volumes = meta_data['vol2fn']\n    cur_text = {}\n    meta_info = {}\n\
        \    num = 1\n    for vol_num, image_group in volumes.items():\n        image_group\
        \ = volumes[vol_num][1:-4]\n        cur_text[num] = { \n            'image_group':\
        \ image_group,\n            'vol_num': vol_num\n        }\n        meta_info.update(cur_text)\n\
        \        num += 1\n        cur_text = {}\n    return meta_info, uuid\ndef\
        \ change_file_name_pages(pages, pages_path, meta_info):\n     for num, vol\
        \ in enumerate(pages,1):\n        vol_num = vol\n        for info_num, meta\
        \ in meta_info.items():\n            meta_vol = meta['vol_num']\n        \
        \    if meta_vol == vol_num:\n                image_group = meta['image_group']\n\
        \                content = pages[f'{vol_num}']\n                lines = re.split(f\"\
        (\\\\\\n)\", content)\n                pages_content = get_clean_pages(lines)\n\
        \                write_text(pages_content, pages_path, image_group, vol_num)\n\
        \                break\ndef change_file_name_plain(meta_info, opf_path, new_path):\n\
        \    for file in os.listdir(f\"{opf_path}/base\"):\n        if file.endswith(\"\
        .txt\"):\n            file_path = Path(f\"{opf_path}/base/{file}\")\n    \
        \        file_name = file[:-4]\n            content = Path(f'{file_path}').read_text(encoding='utf-8')\n\
        \            for info_num, meta in meta_info.items():\n                meta_vol\
        \ = meta['vol_num']\n                if meta_vol == file_name:\n         \
        \           image_group = meta['image_group']\n                    vol_num\
        \ = file_name\n                    write_text(content, new_path, image_group,\
        \ vol_num )    \n                    break\ndef create_zip(base_path, name):\n\
        \    with ZipFile(name, 'w') as zipObj:\n        for folderName, subfolders,\
        \ filenames in os.walk(base_path):\n            for filename in filenames:\n\
        \                filePath = os.path.join(folderName, filename)\n         \
        \       zipObj.write(filePath, basename(filePath))\ndef get_clean_pages(lines):\n\
        \    new_line = []\n    new_content = \"\"\n    for num, line in enumerate(lines,1):\n\
        \        if  num % 2 != 0:\n            new_line = re.sub(f\"(\\[((.\\d+\\\
        w)|(\\d+(a|b)\\.\\d+)|(\\.\\d+))\\])\", \"\", line )\n            new_content\
        \ += new_line\n            new_line = []\n        else:\n            new_content\
        \ += \"\\n\"\n    return new_content\ndef write_text(content, new_path, image_group,\
        \ vol_num):\n    out_fn = Path(f\"{new_path}/{vol_num}_{image_group}.txt\"\
        )\n    out_fn.write_text(content)\n    \n    \nif __name__==\"__main__\":\n\
        \    pecha_id = Path.cwd().name\n    opf_path = Path.cwd().resolve() / f\"\
        {pecha_id}.opf\"\n    meta_content = Path(f'{opf_path}/meta.yml').read_text(encoding='utf-8')\n\
        \    meta_data = yaml.safe_load(meta_content)\n    base_path = Path(f'{opf_path}/base')\n\
        \    plain_path = Path(f\"./output/publication/plains\")\n    plain_path.mkdir(exist_ok=True,\
        \ parents=True)\n    meta_info, uid = get_meta_info(meta_data)\n    change_file_name_plain(meta_info,\
        \ opf_path, plain_path) \n    create_zip(plain_path, f\"{pecha_id}_plain.zip\"\
        )\n    pages_path = Path(f\"./output/publication/pages\")\n    pages_path.mkdir(exist_ok=True,\
        \ parents=True)\n    serializer = HFMLSerializer(opf_path, layers=[\"Pagination\"\
        ])\n    serializer.apply_layers()\n    results = serializer.get_result()\n\
        \    pages = results\n    change_file_name_pages(pages, pages_path, meta_info)\n\
        \    create_zip(pages_path, f\"{pecha_id}_pages.zip\")\n                \n"
      shell: python
    - name: Create Github Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release ${{ github.run_number }}
        draft: false
        prerelease: false
    - name: upload base assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{  secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}_plain.zip
        asset_name: bka_gyur_phug_brag_bris_ma_plain_4c0ea8.zip
        asset_content_type: text/zip
    - name: upload hfml assets
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{  secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ github.event.repository.name }}_pages.zip
        asset_name: bka_gyur_phug_brag_bris_ma_pages_4c0ea8.zip
        asset_content_type: text/zip
