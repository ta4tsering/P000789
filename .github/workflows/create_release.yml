name: Create Release
on:
  push:
    branches: [ main ]
  workflow_dispatch:
jobs:
  release-project:
    name: Release different versions of Text file
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install zipfile36 openpecha PyYAML
          
      - name: Create zip file for text and hfml
        run: |
          import os 
          import re
          import yaml
          from zipfile36 import ZipFile
          from os.path import basename
          from pathlib import Path
          from openpecha.serializers import HFMLSerializer
          
          
          def get_meta_info(meta_data):
              uuid = meta_data['id'][:6]
              volumes = meta_data['vol2fn']
              cur_text = {}
              meta_info = {}
              num = 1
              for vol_num, image_group in volumes.items():
                  image_group = volumes[vol_num][1:-4]
                  cur_text[num] = { 
                      'image_group': image_group,
                      'vol_num': vol_num
                  }
                  meta_info.update(cur_text)
                  num += 1
                  cur_text = {}
              return meta_info, uuid


          def change_file_name_pages(pages, pages_path, meta_info):
               for num, vol in enumerate(pages,1):
                  vol_num = vol
                  for info_num, meta in meta_info.items():
                      meta_vol = meta['vol_num']
                      if meta_vol == vol_num:
                          image_group = meta['image_group']
                          content = pages[f'{vol_num}']
                          lines = re.split(f"(\\\n)", content)
                          pages_content = get_clean_pages(lines)
                          write_text(pages_content, pages_path, image_group, vol_num)
                          break


          def change_file_name_plain(meta_info, opf_path, new_path):
              for file in os.listdir(f"{opf_path}/base"):
                  if file.endswith(".txt"):
                      file_path = Path(f"{opf_path}/base/{file}")
                      file_name = file[:-4]
                      content = Path(f'{file_path}').read_text(encoding='utf-8')
                      for info_num, meta in meta_info.items():
                          meta_vol = meta['vol_num']
                          if meta_vol == file_name:
                              image_group = meta['image_group']
                              vol_num = file_name
                              write_text(content, new_path, image_group, vol_num )    
                              break


          def create_zip(base_path, name):
              with ZipFile(name, 'w') as zipObj:
                  for folderName, subfolders, filenames in os.walk(base_path):
                      for filename in filenames:
                          filePath = os.path.join(folderName, filename)
                          zipObj.write(filePath, basename(filePath))


          def get_clean_pages(lines):
              new_line = []
              new_content = ""
              for num, line in enumerate(lines,1):
                  if  num % 2 != 0:
                      new_line = re.sub(f"(\[((.\d+\w)|(\d+(a|b)\.\d+)|(\.\d+))\])", "", line )
                      new_content += new_line
                      new_line = []
                  else:
                      new_content += "\n"
              return new_content


          def write_text(content, new_path, image_group, vol_num):
              out_fn = Path(f"{new_path}/{vol_num}_{image_group}.txt")
              out_fn.write_text(content)

              
              
          if __name__=="__main__":
              pecha_id = Path.cwd().name
              opf_path = Path.cwd().resolve() / f"{pecha_id}.opf"
              meta_content = Path(f'{opf_path}/meta.yml').read_text(encoding='utf-8')
              meta_data = yaml.safe_load(meta_content)
              base_path = Path(f'{opf_path}/base')
              plain_path = Path(f"./output/publication/plains")
              plain_path.mkdir(exist_ok=True, parents=True)
              meta_info, uid = get_meta_info(meta_data)
              change_file_name_plain(meta_info, opf_path, plain_path) 
              zip_name = f"{pecha_id}_plain.zip"
              create_zip(plain_path, zip_name)
              pages_path = Path(f"./output/publication/pages")
              pages_path.mkdir(exist_ok=True, parents=True)
              serializer = HFMLSerializer(opf_path, layers=["Pagination"])
              serializer.apply_layers()
              results = serializer.get_result()
              pages = results
              change_file_name_pages(pages, pages_path, meta_info)
              zip_name = f"{pecha_id}_pages.zip"
              create_zip(pages_path, zip_name)
                          
        shell: python
        
      - name: Create Github Release
        id: create_release
        uses: actions/create-release@v1
        env: 
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ github.run_number }}
          release_name: Release ${{ github.run_number }}
          draft: false
          prerelease: false
      
      - name: upload base assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{  secrets.GITHUB_TOKEN }}
        with: 
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ github.event.repository.name }}_plain.zip
          asset_name: bka_gyur_phug_brag_bris_ma_plain_4c0ea8.zip
          asset_content_type: text/zip
      
      - name: upload hfml assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{  secrets.GITHUB_TOKEN }}
        with:  
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ github.event.repository.name }}_pages.zip
          asset_name: bka_gyur_phug_brag_bris_ma_pages_4c0ea8.zip
          asset_content_type: text/zip
